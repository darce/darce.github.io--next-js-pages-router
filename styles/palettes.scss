$charcoal-black: #333;
$alabaster-white: #fafafa;
$coral-red: #ff4057;
$sky-blue: #87ceeb;
$antiflash-white: #ebebebff;
$polynesian-blue: #004e98ff;
$azure-blue: #007fff;
$midnight-blue: #011f4b;
$dusk-grey: #4A5459;

$themes: (
    default: (backgroundColor:$alabaster-white,
        header:$midnight-blue,
        subheader: $polynesian-blue,
        activeBg: $coral-red,
        activeText: $antiflash-white,

        text:$charcoal-black,
        link:$azure-blue,
        hover:$sky-blue,
        border:$coral-red,
        highlight: $polynesian-blue,
    ),
    dark: (backgroundColor:$dusk-grey,
        text:$antiflash-white,
        link:$polynesian-blue,
        hover:$azure-blue,
        border:$coral-red,
        highlight: $sky-blue,
    ),
);

/** Compiles selector to: 
    .base.theme--default in global.scss
*/
@mixin themeGlobal($themes: $themes) {
    @each $theme, $map in $themes {
        &.theme--#{$theme} {
            $theme-map: (
                ) !global;

            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}'
                );
            $theme-map: map-merge($theme-map, ($key: $value)) !global;
        }

        @content;
        $theme-map: null !global;
    }
}
}


@mixin themeComponent($themes: $themes) {
    @each $theme, $map in $themes {
        :global(.theme--#{$theme}) & {
            $theme-map: (
                ) !global;

            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}'
                );
            $theme-map: map-merge($theme-map, ($key: $value)) !global;
        }

        @content;
        $theme-map: null !global;
    }
}
}

@function t($key) {
    @return map-get($theme-map, $key);
}